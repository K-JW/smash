/**
\page install Installation

Quick instructions how to build smash.

Prerequisites
-------------

SMASH is known to compile and work with one of these compilers (which have the
required C++11 features):
- gcc >= 4.8
- clang >= 3.2

It requires the following tools & libraries:
- cmake
- the GNU Scientific Library
- the Eigen library for linear algebra (see http://eigen.tuxfamily.org)
- boost filesystem >= 1.49

Further tools that can be helpful (mainly for development):
- ROOT >= 5.34
- doxygen >= 1.8.4
- valgrind
- cpplint
- cppcheck

Support for ROOT output is only enabled if a suitable version of ROOT is found
on the system.


Building SMASH
--------------

Build SMASH in a separate directory:

    mkdir build
    cd build
    cmake ..
    make

Run it with specific settings:

    vi config.yaml
    ./smash


Changing the compiler
---------------------

In order to use a particular compiler, you can set the following environment
variables:

    export CC=gcc
    export CXX=g++

Alternatively the compiler can also be specified to cmake like this:

    cmake .. -DCMAKE_CXX_COMPILER=g++


Compiling SMASH on Mac OS
-------------------------

Unfortunately the Clang Compiler shipped with XCode or the Command Line Tools from Apple does not support all C++11 features that we use.

The workaround is to install the official clang version. For example, this can be done with Homebrew (http://brew.sh):

    brew install llvm

After that you have to instruct cmake that it should use the newly installed clang compiler and also tell the linker where the libraries are by altering some cmake flags. Enter cmake like below:

    cmake .. -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ -DCMAKE_EXE_LINKER_FLAGS="-L/usr/local/opt/llvm/lib -lc++abi" -DCMAKE_CXX_FLAGS=-I/usr/local/opt/llvm/include

Note: FPE environment only works with gcc, so e.g. you won't get backtraces from floating point traps with clang.


Disabling ROOT support
---------------------------

Producing ROOT output requires ROOT installed (see http://root.cern.ch).
If ROOT is found, the support for ROOT output is automatically enabled.
In order to disable it, one can do the follwoing:

    cmake -DUSE_ROOT=OFF <source_dir>
    make

Building the Documentation
--------------------------

Build the code documentation:

    make doc
    firefox doc/html/index.html

Build the user documentation:

    make user
    firefox doc/user/index.html


Running Tests
-------------

Run the various unit tests:

    make test

Another way to do this is:

    ctest


This has the advantage that it can also be used for running tests in parallel on
a multicore machine, e.g. via

    ctest -j4

(on a quad-core machine).


Including Eigen header files from custom location
-------------------------------------------------

Let's assume Eigen headers will be unpacked in $HOME.

- Download latest package [latest-eigen].tar.gz from http://eigen.tuxfamily.org

- unpack: tar -xf [latest-eigen].tar.gz -C $HOME

- in smash/build/, create build files with

  cmake -DCMAKE_INSTALL_PREFIX=$HOME/[latest-eigen]/ ..


Including GSL from custom location
----------------------------------

Using a custom GSL build
----------------------------------

Run the following:

    wget ftp://ftp.gnu.org/gnu/gsl/gsl-latest.tar.gz
    tar -zxvf gsl-latest.tar.gz

This creates a folder named "gsl-[version_number]" called $GSL here.

    cd $GSL
    ./configure --prefix $GSL
    make -jN
    make install

Here N is the number of cores to use in the "make" command. Run cmake with

    cmake -DCMAKE_PREFIX_PATH=$GSL ..

Note: In case of problems, make sure to start with a clean build folder.
