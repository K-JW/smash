/**
\page install Installation

Quick instructions how to build smash.

Prerequisites
-------------

SMASH is known to compile and work with one of these compilers (which have the
required C++11 features):
- gcc >= 4.8
- clang >= 3.2

It requires the following tools & libraries:
- cmake
- the GNU Scientific Library
- the Eigen library for linear algebra (see http://eigen.tuxfamily.org)
- boost filesystem >= 1.49
- yaml-cpp 0.5.1 (see below if you need to install manually)

Further tools that can be helpful (mainly for development):
- ROOT >= 5.34
- doxygen >= 1.8.4
- valgrind
- cpplint
- cppcheck
- PYTHIA, if string excitation is necessary

Support for ROOT output is only enabled if a suitable version of ROOT is found
on the system.


Building SMASH
--------------

Build it in a separate directory:

    mkdir build
    cd build
    cmake ..
    make

Run it with specific settings:

    vi config.yaml
    ./smash


Changing the compiler
---------------------

In order to use a particular compiler, you can set the following environment
variables:

    export CC=gcc
    export CXX=g++

Alternatively the compiler can also be specified to cmake like this:

    cmake .. -DCMAKE_CXX_COMPILER=g++


Disabling ROOT support
---------------------------

Producing ROOT output requires ROOT installed (see http://root.cern.ch).
If ROOT is found, the support for ROOT output is automatically enabled.
In order to disable it, one can do the follwoing:

    cmake -DUSE_ROOT=OFF <source_dir>
    make

Building the Documentation
--------------------------

Build the code documentation:

    make doc
    firefox doc/html/index.html

Build the user documentation:

    make user
    firefox doc/user/index.html


Running Tests
-------------

Run the various unit tests:

    make test

Another way to do this is:

    ctest


This has the advantage that it can also be used for running tests in parallel on
a multicore machine, e.g. via

    ctest -j4

(on a quad-core machine).


Installing yaml-cpp manually
----------------------------

- get the yaml-cpp tarball

      wget http://yaml-cpp.googlecode.com/files/yaml-cpp-0.5.1.tar.gz

- unpack

      tar -xf yaml-cpp-0.5.1.tar.gz

- build in a build directory

      cd yaml-cpp-0.5.1
      mkdir build
      cd build
      cmake -DCMAKE_INSTALL_PREFIX=[prefix] -DCMAKE_BUILD_TYPE=Release ..
      make
      make install

  Replace [prefix] above with the place where you want to install yaml-cpp. You
  can e.g. install it to $HOME.
- If you did not install you a standard location you'll need to set the
  PKG_CONFIG_PATH environment variable for SMASH to find it:

      export PKG_CONFIG_PATH=[prefix]/lib/pkgconfig

Including Eigen header files from custom location
-------------------------------------------------

Let's assume Eigen headers will be unpacked in $HOME.

- Download latest package [latest-eigen].tar.gz from http://eigen.tuxfamily.org

- unpack: tar -xf [latest-eigen].tar.gz -C $HOME

- in smash/build/, create build files with

  cmake -DCMAKE_INSTALL_PREFIX=$HOME/[latest-eigen]/ ..

Installing Pythia
------------------------------

- get the Pythia tarball from http://home.thep.lu.se/~torbjorn/Pythia.html

- Unzip and expand it with tar xvfz pythia8205.tgz

- Move to the created pythia8205 directory and compile as described there

   ./configure
   make

- Set the path so that pythia8-config (in pythia8205/bin) is found and 
  make it executable if necessary
