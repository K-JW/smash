/*
 *
 *    Copyright (c) 2015-
 *      SMASH Team
 *
 *    GNU General Public License (GPLv3 or later)
 *    If Pythia cite 
 *    T. Sj√∂strand, S. Mrenna and P. Skands, JHEP05 (2006) 026,
 *                          Comput. Phys. Comm. 178 (2008) 852.
 *    
 */

#include "include/pythia.h"

#include "include/action.h"
#include "include/forwarddeclarations.h"
#include "include/logging.h"
#include "include/particledata.h"
#include "include/random.h"

/* #ifdef Pythia_FOUND */
#include "Pythia8/Pythia.h"
/* #include "Pythia8/LHAPDFInterface.h"
 * #endif */

namespace Smash {  
  /* This function will generate outgoing particles in CM frame from a hard process */
  ParticleList string_excitation(const ParticleList &incoming_particles_) {
	const auto &log = logger<LogArea::Pythia>();  
    /* #ifdef Pythia_FOUND */
	/* set all necessary parameters for Pythia 
	 * Create Pythia object */
    std::string xmlpath = PYTHIA_XML_DIR;
    log.debug ("Creating Pythia object."); 
    Pythia8::Pythia pythia( xmlpath, false ); 
    /* select only inelastic events: */
    pythia.readString("SoftQCD:inelastic = on");
    /* suppress unnecessary output */
    pythia.readString("Print:quiet = on");
    /* No resonance decays, since the resonances will be handled by SMASH */
    pythia.readString("HadronLevel:Decay = off");
    /* Set the random seed of the Pythia Random Number Generator.
     * Please note: Here we use a random number generated by the
     * SMASH, since every call of pythia.init should produce
     * different events. */
    pythia.readString("Random:setSeed = on");
    std::stringstream buffer;
    buffer << "Random:seed = " << Random::canonical() ;
    pythia.readString(buffer.str());
    /* set the incoming particles */
    buffer << "Beams:idA = " << incoming_particles_[0].type().pdgcode().dump();
    pythia.readString(buffer.str());    
    buffer << "Beams:idB = " << incoming_particles_[1].type().pdgcode().dump();
    pythia.readString(buffer.str());
    /* Calculate the center-of-mass energy of this collision */
    double sqrts = (incoming_particles_[0].momentum() +
          incoming_particles_[1].momentum()).abs();
    buffer << "Beams:eCM = " << sqrts;
    pythia.readString(buffer.str());
    /* Initialize. */
    pythia.init();
   /*    #else
    *     std::string errMsg = "Pythia 8 not available for string excitation";
    *     throw std::runtime_error( errMsg );
    *    #endif */
        
    ParticleList outgoing_particles_; 
    return outgoing_particles_; 
  }	
}
